{"version":3,"sources":["components/Loader/Loader.tsx","api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","request","url","option","method","fetch","then","response","ok","Error","status","statusText","json","getUserPosts","userId","a","urlForRequest","posts","getPost","id","post","PostsList","selectedUser","selectPost","selectedPost","useState","setPosts","loading","setLoading","useEffect","loadedPosts","map","title","type","classNames","PostsList__button","button","onClick","NewCommentForm","AddCommentAfterSubmit","name","setName","email","setEmail","body","setBody","isInputEmpty","setisInputEmpty","onSubmit","event","preventDefault","postId","value","placeholder","onChange","target","getComments","AddComment","comment","headers","JSON","stringify","data","DeleteComment","commentId","deletedPost","PostDetails","setPost","visibility","setVisibility","comments","setComments","commentsFromServer","length","prev","filter","prevComment","newComment","addedComment","getUsers","App","users","setUsers","selectUser","usersFromAPI","htmlFor","currentTarget","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.478088bd.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\ninterface Option {\n  method: string,\n  body?: string,\n  headers?: { 'Content-type': string }\n}\n\nexport const request = (url: string, option: Option = { method: 'GET' }) => {\n  return fetch(`${BASE_URL}${url}`, option)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { request } from './api';\n\nexport const getUserPosts = async (userId: string): Promise<Post[]> => {\n  const urlForRequest = userId === '' || userId === '0'\n    ? '/posts'\n    : `/posts?userId=${userId}`;\n  const posts = await request(urlForRequest);\n\n  return posts;\n};\n\nexport const getPost = async (id: string): Promise<Post> => {\n  const urlForRequest = `/posts/${id}`;\n  const post = await request(urlForRequest);\n\n  return post;\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\n\nimport classNames from 'classnames';\nimport { Loader } from '../Loader/Loader';\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  selectedUser: string;\n  selectedPost: string;\n  selectPost: (value: string) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  selectPost,\n  selectedPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(false);\n      const loadedPosts = await getUserPosts(selectedUser);\n\n      setPosts(loadedPosts);\n    })();\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      {\n        loading\n          ? <Loader />\n          : (\n            <>\n              <h2>Posts:</h2>\n              <ul className=\"PostsList__list\">\n                {\n                  posts.map(post => {\n                    const { userId, title, id } = post;\n\n                    return (\n                      <li\n                        className=\"PostsList__item\"\n                        key={id}\n                      >\n                        <div>\n                          <b>\n                            [User\n                            {userId}\n                            ]:\n                            {' '}\n                          </b>\n                          {title}\n                        </div>\n                        <button\n                          type=\"button\"\n                          className={classNames({\n                            PostsList__button: true,\n                            'PostsList__button--active': selectedPost === id,\n                            button: true,\n                          })}\n                          onClick={() => {\n                            selectPost(selectedPost === id ? '' : `${id}`);\n                          }}\n                        >\n                          {selectedPost === `${id}`\n                            ? 'Close'\n                            : 'Open'}\n                        </button>\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n            </>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPost: string,\n  AddCommentAfterSubmit: (comment: Partial<Comment>) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ selectedPost, AddCommentAfterSubmit }) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n  const [isInputEmpty, setisInputEmpty] = useState(false);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event: React.ChangeEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (name && email && body && selectedPost) {\n          const newComment = {\n            postId: selectedPost,\n            name,\n            email,\n            body,\n          };\n\n          AddCommentAfterSubmit(newComment);\n\n          setisInputEmpty(false);\n          setName('');\n          setEmail('');\n          setBody('');\n        } else {\n          setisInputEmpty(true);\n        }\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {isInputEmpty && <span className=\"error-mesege\">All fields must not be empty</span>}\n    </form>\n  );\n};\n","import { request } from './api';\n\nexport const getComments = async (postId: string) => {\n  const post: Comment[] = await request(`/comments?postId=${+postId}`);\n\n  return post;\n};\n\nexport const AddComment = async (comment: Partial<Comment>):Promise<Comment> => {\n  const data = await request(\n    '/comments',\n    {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(comment),\n    },\n  );\n\n  return data;\n};\n\nexport const DeleteComment = async (commentId: string) => {\n  const deletedPost = await request(`/comments/${commentId}`, { method: 'DELETE' });\n\n  return deletedPost;\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPost } from '../../api/posts';\nimport { getComments, AddComment, DeleteComment } from '../../api/comments';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPost: string,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [visibility, setVisibility] = useState<boolean>(true);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  useEffect(() => {\n    getPost(selectedPost)\n      .then(data => {\n        const postFromServer = data;\n\n        setPost(postFromServer);\n      });\n    getComments(selectedPost)\n      .then(commentsFromServer => {\n        setComments(commentsFromServer);\n      });\n    setVisibility(true);\n  }, [selectedPost]);\n\n  const AddCommentAfterSubmit = (newComment: Partial<Comment>) => {\n    AddComment(newComment)\n      .then(addedComment => {\n        setComments(prev => [...prev, addedComment]);\n      });\n  };\n\n  return !selectedPost\n    ? (\n      <div className=\"PostDetails\">\n        <h2> Please, select one of posts</h2>\n      </div>\n    )\n    : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n        {post !== null && (\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n        )}\n\n        <section className=\"PostDetails__comments\">\n          {comments.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setVisibility(prev => !prev)}\n            >\n              {`${visibility ? 'Hide' : 'Show'} ${comments.length} comments`}\n            </button>\n          )}\n\n          {visibility && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      DeleteComment(comment.id);\n                      setComments(prev => prev\n                        .filter(prevComment => prevComment.id !== comment.id));\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPost={selectedPost}\n              AddCommentAfterSubmit={AddCommentAfterSubmit}\n            />\n          </div>\n        </section>\n      </div>\n    );\n};\n","import { request } from './api';\n\nexport const getUsers = async () => {\n  return request('/users');\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, selectUser] = useState<string>('');\n  const [selectedPost, selectPost] = useState<string>('');\n\n  useEffect(() => {\n    (async () => {\n      const usersFromAPI = await getUsers();\n\n      setUsers(usersFromAPI);\n    })();\n  }, []);\n\n  const userSelector = (userId: string) => {\n    selectUser(userId);\n    selectPost('');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"selection_users\">\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser || 0}\n            onChange={(event) => userSelector(event.currentTarget.value)}\n          >\n            <option value=\"0\" id=\"selection_users\">All users</option>\n            {users.map(user => {\n              return (\n                <option\n                  value={`${user.id}`}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              );\n            })}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            selectPost={selectPost}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPost !== '0'\n              ? <PostDetails selectedPost={selectedPost} />\n              : <h2>Select post to see details</h2>\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}